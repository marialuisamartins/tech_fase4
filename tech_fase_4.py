# -*- coding: utf-8 -*-
"""Tech_fase_4

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tFyNniWRPkuSuLTQcrwUpuGrf25zZjDM

# Tech challenge fase 4

## Importando o arquivo do ipea do github para o notebook
"""

import pandas as pd

# Comando de download usando wget
os.system("wget 'https://raw.githubusercontent.com/marialuisamartins/tech_fase4/6ad3e07bc901fd984eedb3030510b2816aaf7383/ipeadata%5B03-11-2024-01-09%5D.xlsx' -O ipeadata.xlsx")

# Read the Excel file using pd.read_excel, optionally specifying the engine 
ipeadata = pd.read_excel('ipeadata.xlsx', engine='openpyxl') # engine='openpyxl' is the default and generally won't need to be specified for .xlsx files
# if this file were a .xls you would need to change it to engine='xlrd'

"""## An√°lise explorat√≥ria e tratamento de nulos e tipos de dado"""

ipeadata.head()

ipeadata.shape

ipeadata.info()

# Converte a coluna 'data' para o tipo datetime
ipeadata['data'] = pd.to_datetime(ipeadata['data'], errors='coerce')

ipeadata.describe()

ipeadata.isnull().sum()

# Remover linhas com nulos na coluna 'preco'
ipeadata.dropna(subset=['preco'], inplace=True)

ipeadata.isnull().sum()

"""## An√°lise utilizando gr√°ficos"""

import matplotlib.pyplot as plt

# Configurando o gr√°fico de linha
plt.figure(figsize=(14, 6))
plt.plot(ipeadata['data'], ipeadata['preco'], color='blue')
plt.title('Pre√ßo do Petr√≥leo ao Longo do Tempo')
plt.xlabel('Data')
plt.ylabel('Pre√ßo')
plt.grid(True)
plt.show()

plt.figure(figsize=(10, 6))
plt.hist(ipeadata['preco'], bins=30, color='skyblue', edgecolor='black')
plt.title('Distribui√ß√£o do Pre√ßo do Petr√≥leo')
plt.xlabel('Pre√ßo')
plt.ylabel('Frequ√™ncia')
plt.grid(True)
plt.show()

# Definindo janelas para m√©dias m√≥veis
ipeadata['media_movel_7'] = ipeadata['preco'].rolling(window=7).mean()
ipeadata['media_movel_30'] = ipeadata['preco'].rolling(window=30).mean()

# Plotando o pre√ßo e as m√©dias m√≥veis
plt.figure(figsize=(14, 6))
plt.plot(ipeadata['data'], ipeadata['preco'], label='Pre√ßo Di√°rio', color='blue', alpha=0.5)
plt.plot(ipeadata['data'], ipeadata['media_movel_7'], label='M√©dia M√≥vel de 7 dias', color='orange')
plt.plot(ipeadata['data'], ipeadata['media_movel_30'], label='M√©dia M√≥vel de 30 dias', color='green')
plt.title('Pre√ßo do Petr√≥leo com M√©dias M√≥veis')
plt.xlabel('Data')
plt.ylabel('Pre√ßo')
plt.legend()
plt.grid(True)
plt.show()

"""## Modelo de machine learning"""

os.system("pip install statsmodels")

from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
from statsmodels.tsa.arima.model import ARIMA

# Filtrar dados a partir de 2021 - p√≥s covid-19
ipeadata_filtered = ipeadata.loc['2021-01-01':].copy()

# Configura 'data' como √≠ndice e define frequ√™ncia di√°ria
ipeadata_filtered = ipeadata_filtered.asfreq('D')

# Realizar a diferencia√ß√£o da s√©rie para garantir estacionaridade
ipeadata_filtered['preco_diff'] = ipeadata_filtered['preco'].diff().dropna()

# Plotando ACF e PACF para determinar p e q
plt.figure(figsize=(14, 6))

plt.subplot(1, 2, 1)
plot_acf(ipeadata_filtered['preco_diff'].dropna(), lags=40, ax=plt.gca())
plt.title('Autocorrelation Function (ACF)')

plt.subplot(1, 2, 2)
plot_pacf(ipeadata_filtered['preco_diff'].dropna(), lags=40, ax=plt.gca())
plt.title('Partial Autocorrelation Function (PACF)')

plt.tight_layout()
plt.show()

"""Interpreta√ß√£o dos Gr√°ficos

*   ACF:

Observe o primeiro decaimento significativo no gr√°fico ACF para estimar o valor de ùëû


Um corte r√°pido para zero ap√≥s alguns lags indica um valor baixo para ùëû, enquanto uma cauda prolongada pode sugerir um valor maior.


*  PACF:

O primeiro lag significativo no gr√°fico PACF indica o valor de ùëù.


Se o gr√°fico PACF decai rapidamente para zero ap√≥s poucos lags, sugere que o valor de ùëù seja baixo. Se apresenta uma cauda prolongada, pode indicar um ùëù mais alto.

> Esses gr√°ficos ajudar√£o a definir os par√¢metros ideais para o modelo ARIMA. Em seguida, voc√™ pode testar as combina√ß√µes de p,d, e q para obter o melhor ajuste.

"""

# Ajuste do modelo ARIMA (defina p, d, q conforme an√°lise dos gr√°ficos ACF e PACF)
model = ARIMA(ipeadata_filtered['preco'], order=(5, 1, 0))  # Exemplo; ajuste conforme necess√°rio
model_fit = model.fit()

# Forecast para o pr√≥ximo dia
forecast = model_fit.forecast(steps=1)
print(f"Previs√£o para o pr√≥ximo dia: {forecast[0]:.2f}")

# Adiciona a previs√£o ao dataframe para visualiza√ß√£o
ipeadata_filtered['previsao'] = model_fit.predict(start=0, end=len(ipeadata_filtered)-1)

# Filtra para exibir apenas o ano de 2024
ipeadata_2024 = ipeadata_filtered[ipeadata_filtered.index.year == 2024]

# Plotando o gr√°fico de 2024
plt.figure(figsize=(12, 6))
plt.plot(ipeadata_2024['preco'], label='Pre√ßo Original')
plt.plot(ipeadata_2024['previsao'], label='Previs√£o do Modelo ARIMA', linestyle='--')
plt.title('Pre√ßo do Petr√≥leo com Forecast para 2024')
plt.xlabel('Data')
plt.ylabel('Pre√ßo')
plt.legend()
plt.show()

"""***overfitting?***

1. Revisar o AIC e o BIC: Valores menores desses crit√©rios geralmente indicam um modelo mais apropriado. Ajustar o modelo com base no menor AIC ou BIC pode ajudar a evitar o overfitting.

2. Realizar Cross-Validation (Valida√ß√£o Cruzada): Embora a valida√ß√£o cruzada seja mais complexa para s√©ries temporais, o m√©todo "Time Series Split" pode ser √∫til.

3. Testar Par√¢metros Mais Simples: Diminuir os valores de p, d, e q e usar um conjunto de testes pode indicar se um modelo mais simples mant√©m uma performance aceit√°vel sem overfitting.

## Planejamento do Deploy em Produ√ß√£o do Modelo

Primeiro, defina as ferramentas e o fluxo de trabalho para o deploy em produ√ß√£o, levando em conta:

*  Modelo e Frameworks: Certifique-se de que o modelo ARIMA, as bibliotecas de machine learning e os scripts estejam prontos e integrados.
*  Infraestrutura para Automa√ß√£o: Utilize ferramentas de automa√ß√£o (ex.: CRON no Linux ou servi√ßos como AWS Lambda) para agendar a execu√ß√£o di√°ria do modelo.
*  Banco de Dados ou Armazenamento em Nuvem: Configure um banco de dados (como MySQL, PostgreSQL) ou use armazenamento em nuvem (como AWS S3 ou Google Cloud Storage) para salvar os resultados di√°rios da previs√£o.
*  Integra√ß√£o com Power BI: Utilize uma fonte de dados que o Power BI possa consultar e atualizar automaticamente, como uma URL com um arquivo JSON/CSV atualizado pelo Streamlit ou por uma API.

## Criar o MVP do Modelo em Produ√ß√£o com Streamlit

Para desenvolver um MVP com Streamlit, voc√™ pode criar uma interface simples que exibe a previs√£o di√°ria do pre√ßo do petr√≥leo e salva os resultados em um arquivo CSV ou JSON acess√≠vel pelo Power BI.
"""

pip install streamlit

import streamlit as st
import pandas as pd
from statsmodels.tsa.arima.model import ARIMA
import datetime

# Fun√ß√£o para carregar os dados e ajustar o modelo
def forecast_model(data):
    # Definir explicitamente a frequ√™ncia para evitar o warning sobre a falta de informa√ß√£o de frequ√™ncia
    data = data.asfreq('D')  # Define a frequ√™ncia como di√°ria

    modelo = ARIMA(data['preco'], order=(2, 1, 2))  # Ajuste com os par√¢metros adequados
    modelo_fit = modelo.fit()
    forecast = modelo_fit.forecast(steps=1)

    # Corrigir o acesso √† previs√£o usando .iloc para acessar a previs√£o corretamente
    return forecast.iloc[0]

# Gera a previs√£o
previsao_hoje = forecast_model(ipeadata_filtered)

# Mostra a previs√£o na interface Streamlit
st.title("Previs√£o Di√°ria do Pre√ßo do Petr√≥leo")
st.write(f"Previs√£o para o pr√≥ximo dia: {previsao_hoje:.2f}")

# Criar diret√≥rio para salvar o arquivo se n√£o existir
output_dir = './previsao_output'
os.makedirs(output_dir, exist_ok=True)

# Salvar a previs√£o em um arquivo CSV no diret√≥rio atual
forecast_df = pd.DataFrame({'Data': [datetime.date.today()], 'Previsao_Prec': [previsao_hoje]})
forecast_df.to_csv(f'{output_dir}/previsao_petroleo.csv', index=False)

# Exibir o link para download do arquivo CSV
st.write("A previs√£o foi salva com sucesso!")
st.download_button(
    label="Baixar previs√£o",
    data=forecast_df.to_csv(index=False).encode(),
    file_name="previsao_petroleo.csv",
    mime="text/csv"
)

"""## Como Rodar o Streamlit:

Salve o c√≥digo acima em um arquivo Python (por exemplo, forecast_app.py).

Para rodar o Streamlit, execute o seguinte comando no terminal (onde forecast_app.py √© o nome do seu arquivo):

`streamlit run forecast_app.py`

No navegador, a interface do Streamlit ser√° carregada, e voc√™ poder√° visualizar a previs√£o e tamb√©m baixar o arquivo CSV com a previs√£o de pre√ßos.
"""

